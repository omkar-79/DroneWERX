
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  fullName: 'fullName',
  avatar: 'avatar',
  role: 'role',
  joinDate: 'joinDate',
  location: 'location',
  bio: 'bio',
  expertise: 'expertise',
  isVerified: 'isVerified',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  passwordHash: 'passwordHash',
  emailVerifiedAt: 'emailVerifiedAt',
  serviceBranch: 'serviceBranch',
  yearsOfService: 'yearsOfService',
  deploymentHistory: 'deploymentHistory',
  securityClearance: 'securityClearance',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorSecret: 'twoFactorSecret',
  refreshToken: 'refreshToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.UserStatsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  threadsCreated: 'threadsCreated',
  solutionsPosted: 'solutionsPosted',
  commentsPosted: 'commentsPosted',
  upvotesReceived: 'upvotesReceived',
  solutionsAccepted: 'solutionsAccepted'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  icon: 'icon',
  color: 'color',
  parentId: 'parentId',
  threadCount: 'threadCount',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  color: 'color',
  usageCount: 'usageCount',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ThreadScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  authorId: 'authorId',
  categoryId: 'categoryId',
  priority: 'priority',
  status: 'status',
  urgency: 'urgency',
  trlLevel: 'trlLevel',
  domain: 'domain',
  location: 'location',
  deadline: 'deadline',
  views: 'views',
  upvotes: 'upvotes',
  downvotes: 'downvotes',
  solutionCount: 'solutionCount',
  commentCount: 'commentCount',
  isAcceptedSolution: 'isAcceptedSolution',
  acceptedSolutionId: 'acceptedSolutionId',
  hotScore: 'hotScore',
  isSticky: 'isSticky',
  isClosed: 'isClosed',
  isAnonymous: 'isAnonymous',
  classification: 'classification',
  isEncrypted: 'isEncrypted',
  encryptedFields: 'encryptedFields',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ThreadTagScalarFieldEnum = {
  threadId: 'threadId',
  tagId: 'tagId'
};

exports.Prisma.ThreadViewScalarFieldEnum = {
  id: 'id',
  threadId: 'threadId',
  userId: 'userId',
  ipAddress: 'ipAddress',
  viewedAt: 'viewedAt'
};

exports.Prisma.SolutionScalarFieldEnum = {
  id: 'id',
  threadId: 'threadId',
  authorId: 'authorId',
  title: 'title',
  content: 'content',
  isAccepted: 'isAccepted',
  status: 'status',
  statusUpdatedBy: 'statusUpdatedBy',
  statusUpdatedAt: 'statusUpdatedAt',
  statusNote: 'statusNote',
  upvotes: 'upvotes',
  downvotes: 'downvotes',
  isEdited: 'isEdited',
  estimatedCost: 'estimatedCost',
  implementationTime: 'implementationTime',
  trlLevel: 'trlLevel',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  content: 'content',
  parentId: 'parentId',
  threadId: 'threadId',
  solutionId: 'solutionId',
  upvotes: 'upvotes',
  downvotes: 'downvotes',
  isEdited: 'isEdited',
  editedAt: 'editedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VoteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  targetId: 'targetId',
  targetType: 'targetType',
  type: 'type',
  createdAt: 'createdAt'
};

exports.Prisma.AttachmentScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  originalName: 'originalName',
  mimeType: 'mimeType',
  size: 'size',
  url: 'url',
  thumbnailUrl: 'thumbnailUrl',
  uploadedBy: 'uploadedBy',
  threadId: 'threadId',
  solutionId: 'solutionId',
  isImage: 'isImage',
  isDocument: 'isDocument',
  isVideo: 'isVideo',
  width: 'width',
  height: 'height',
  duration: 'duration',
  storageKey: 'storageKey',
  bucketName: 'bucketName',
  virusScanned: 'virusScanned',
  scanResult: 'scanResult',
  checksum: 'checksum',
  isProcessed: 'isProcessed',
  processingError: 'processingError',
  isPublic: 'isPublic',
  accessPolicy: 'accessPolicy',
  uploadedAt: 'uploadedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BountyScalarFieldEnum = {
  id: 'id',
  threadId: 'threadId',
  amount: 'amount',
  currency: 'currency',
  description: 'description',
  deadline: 'deadline',
  isActive: 'isActive',
  winnerId: 'winnerId',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  data: 'data',
  isRead: 'isRead',
  actionUrl: 'actionUrl',
  createdAt: 'createdAt'
};

exports.Prisma.ThreadActivityScalarFieldEnum = {
  id: 'id',
  threadId: 'threadId',
  userId: 'userId',
  type: 'type',
  description: 'description',
  metadata: 'metadata',
  timestamp: 'timestamp'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  tableName: 'tableName',
  recordId: 'recordId',
  oldData: 'oldData',
  newData: 'newData',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  timestamp: 'timestamp'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  type: 'type',
  expiresAt: 'expiresAt',
  isRevoked: 'isRevoked',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.BookmarkScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  targetId: 'targetId',
  targetType: 'targetType',
  createdAt: 'createdAt'
};

exports.Prisma.FollowScalarFieldEnum = {
  id: 'id',
  followerId: 'followerId',
  followingId: 'followingId',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  WARFIGHTER: 'WARFIGHTER',
  INNOVATOR: 'INNOVATOR',
  MODERATOR: 'MODERATOR',
  ADMIN: 'ADMIN'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.ThreadStatus = exports.$Enums.ThreadStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  SOLVED: 'SOLVED',
  CLOSED: 'CLOSED',
  ARCHIVED: 'ARCHIVED'
};

exports.Urgency = exports.$Enums.Urgency = {
  ROUTINE: 'ROUTINE',
  PRIORITY: 'PRIORITY',
  IMMEDIATE: 'IMMEDIATE',
  FLASH: 'FLASH'
};

exports.TRLLevel = exports.$Enums.TRLLevel = {
  TRL1: 'TRL1',
  TRL2: 'TRL2',
  TRL3: 'TRL3',
  TRL4: 'TRL4',
  TRL5: 'TRL5',
  TRL6: 'TRL6',
  TRL7: 'TRL7',
  TRL8: 'TRL8',
  TRL9: 'TRL9'
};

exports.ClassificationLevel = exports.$Enums.ClassificationLevel = {
  PUBLIC: 'PUBLIC',
  RESTRICTED: 'RESTRICTED',
  CONFIDENTIAL: 'CONFIDENTIAL',
  SECRET: 'SECRET'
};

exports.SolutionStatus = exports.$Enums.SolutionStatus = {
  DRAFT: 'DRAFT',
  SUBMITTED: 'SUBMITTED',
  PENDING: 'PENDING',
  UNDER_REVIEW: 'UNDER_REVIEW',
  PASS: 'PASS',
  FAIL: 'FAIL',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.VoteType = exports.$Enums.VoteType = {
  UPVOTE: 'UPVOTE',
  DOWNVOTE: 'DOWNVOTE'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  NEW_SOLUTION: 'NEW_SOLUTION',
  SOLUTION_ACCEPTED: 'SOLUTION_ACCEPTED',
  COMMENT_REPLY: 'COMMENT_REPLY',
  THREAD_UPDATE: 'THREAD_UPDATE',
  BOUNTY_AWARDED: 'BOUNTY_AWARDED',
  BADGE_EARNED: 'BADGE_EARNED',
  MENTION: 'MENTION'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserStats: 'UserStats',
  Category: 'Category',
  Tag: 'Tag',
  Thread: 'Thread',
  ThreadTag: 'ThreadTag',
  ThreadView: 'ThreadView',
  Solution: 'Solution',
  Comment: 'Comment',
  Vote: 'Vote',
  Attachment: 'Attachment',
  Bounty: 'Bounty',
  Notification: 'Notification',
  ThreadActivity: 'ThreadActivity',
  AuditLog: 'AuditLog',
  Session: 'Session',
  Bookmark: 'Bookmark',
  Follow: 'Follow'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
